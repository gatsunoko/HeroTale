

### jInput Mapping ###

キーコンフィグ機能をあなたのゲーム内に！
Input Mapping / key Assign / Key Config



================== まずはデモを動かしてみる ==================

Unityバージョン5.3以上にて動作します
インポートされたファイル郡は、全てjInputMappingフォルダ内にあります
全てのインポートが正常に行われていれば、Demoシーンをプレイして動作を確認できます
デモにはUIがUnityGUIで作られたものと、3Dオブジェクトで作られたものの2種類があります
UnityGUI版にはスクロール機能などいくつかの追加要素があり、特に理由が無ければこちらを使うほうが良いでしょう
3Dオブジェクト版は何らかの理由でUnityGUIを使えない場合に使用してください


========== あなたのゲーム内で使用するには ==========

インポートしたあと、

UnityのHierarchyウインドウで'jInputMappingSet'オブジェクトをデモからコピーしてきて、あなたのゲームのプレイヤーがキーコンフィグするシーンに加えてください
まずはこのInspectorウインドウで、あなたのゲームに合わせて基本的な設定を行う必要があります
最大プレイヤー人数やデフォルトキーなどです(後述します)

基本設定が終わったら一度そのシーンをPlayしてエラーが出ないかチェックしてください

キャラクターを動かすスクリプト内などでの使い方の基本は、デモのCubeの動きと'DemoCube.cs'を参考にしてください
マッピングされた項目は'Mapper.InputArray[]'配列に格納されます(Player1の場合)
通常はInput.Get...と記述する場所を'jInput.Get...'としてください
例: var v = jInput.GetAxis(Mapper.InputArray[0]);
これでPlayer1の配列の0番目に設定された入力を得られます

Joystick方向, Joystickボタン, キーボード, マウス, どれでもマッピングでき、
GetKey&Button, KeyUp, KeyDown, GetAxis&Raw, どれででも取得することができます


========== 新しいVersionにアップデートする ==========

新しいVersionをインポートした直後、必ず'jInputMappingSet'を配置しているシーンを一度開いてください
これにより、アップデートの変更点が機能に適合されます
これを行わない場合、既存のデータ部分とアップデートした部分が食い違って正常に動かない可能性があるので注意してください


===============================================================


 * 基本的な設定はjInputMappingSetオブジェクトのInspectorにて
   jInputSettingsコンポーネントの各項目に入力するだけで自動で行われます

	- Menu Item Headings ではキー入力の項目数と名称を設定します
		HerarchyウインドウのjInputMappingSet/MainWindow/InMapperMenuItems内に
		項目数に応じて自動で欄が追加削除されます
		ゲーム内で実際に使用しているInputArray[]の数未満に設定すると
		プレイ時にエラーになることに注意してください
		例えばデモではInputArray[]の0～6番目を使用しているので、7未満の数だとエラーとなります

	- Max Players in Same Place は同じ場所のゲームプログラムに同時接続してプレイする最大人数です
		ネットを介すのではなく、友達の部屋に集まって一つのゲーム機に
		いくつかのゲームパッドを繋ぐような場合です
		２～４人目のインプット設定はそれぞれ
		'Mapper.InputArray2p[]'、'Mapper.InputArray3p[]'、'Mapper.InputArray4p[]'配列に
		格納されています
		例: var jump = jInput.GetKeyDown(Mapper.InputArray2p[5]);
		これでPlayer2の配列の5番目に設定された入力を得られます

	- Default Input Mapping はプレイヤーがマッピングをしていない場合のデフォルトキーを設定します
		KeyCodeがあるキーの場合はそれを記入します
		例: A / LeftShift / Mouse0 / Joystick1Button1
		JoystickのAxisは以下の規則的な名前を使います
		'Joystick1Axis1'...'Joystick1Axis20'...'Joystick4Axis20'の末尾に'+'か'-'.
		例: Joystick1Axis1+
		マウスホイールも同様に'MouseWheel'の末尾に'+'か'-'.
		例: MouseWheel-
		末尾に'+'か'-'が必要なものは忘れないように注意してください
		シーンをプレイして実際にキーをマッピングしてみればそのキーの設定名がすぐに分かります
		また、プレイヤーがマッピングするのと同じように実際にキーを押してデフォルトキーを設定したり
		ドロップダウンリストからキーを選択することで設定することもできます
		大文字小文字の間違いは自動で修正され、設定名が誤っている場合はシーンをプレイした際に
		エラーで示唆します
		デフォルトキーを設定した後は一度シーンをPlayしてエラーが出ないか確認してください

	- Deal with Same Key (3Dオブジェクト使用バージョンではPreclude Same Mapping)では
		同じキーを複数の項目で重複してマッピングできないようにするかどうかです
		Preclude Same Mapping をチェックした場合、ユーザーは別々の項目に同じキーを
		割り当てることができなくなります
		Same KeyName Color は上記にチェックを入れない場合、同じキーが2つ以上の項目に
		割り振られた際に文字に付く色です
		このカラー項目はUnityGUI使用バージョンのjInputのほうにしかありません
		3Dオブジェクト使用バージョンのマッピングウインドウの場合は各インプット項目の
		Inspectorウインドウに同じ用途のカラー項目があります

	- Unuseble Mapping ではユーザーがマッピングに使用できないキーを設定します
		例えばあなたがReturnキーに特殊な動作を固定で設定したい場合、このキーにユーザーが
		別の動作をマッピングできないようにするとよいでしょう

	- Exclude Device はゲームパッドだけマッピング可能にしたい、あるいはキーボードだけ
		マッピング可能にしたい場合に使います
		マウスおよびタッチ操作はプレイヤーの入力デバイスが壊れた際などに応急的に
		マッピング画面を開いて操作する保険として必要なため除外できないようになっています
		応用的な使い道として、一人プレイ用のゲームでMax Players in Same Placeを2人にして
		Player1をゲームパッドのみ、Player2をキーボードのみとすることで
		ゲームパッド用とキーボード用のマッピングをどちらも持てるようにするといった事もできます

	- UI Operation Settings ではjInput内での上下左右の移動に使われる項目を指定します
		また、UnityGUIにおいての上下左右移動もここで設定した項目になります
		UGUI Submit,UGUI Cancelの項目も同様にUnityGUIでのそれらの動作を行う項目の指定です
		あなたが設置したUnityGUIのEventSystemがある場合は、そちらと競合しないように
		設定する必要がありますが、これについてはUnityGUI自体の仕様も含めた説明が必要なため
		詳細は最後にある説明サイトを見てください
		Exclude Decision Fncはマッピングウインドウにおいて決定動作から除外する入力を指定します
		上記で設定した上下左右の方向キーとCancelキーは自動的にチェックが入り
		決定動作から除外されます
		マッピングウインドウではプレイヤーが設定しやすいようにほぼすべてのキーが
		決定動作するようになっており、例えば仮に方向キーが決定動作も同時にしたままだと
		方向入力と同時に決定もしてしまうためカーソルを動かすことができません
		このような役割を持つキー項目は決定動作から除外する必要があります
		あなたのゲームにおけるキーの動作に応じて、マッピングウインドウで決定動作すると
		おかしくなるような挙動のキー項目はここでチェックを入れてください

	- Use Esc Decided Behavior はEscapeキーをマッピングウインドウ内での
	  	決められたキャンセル動作として使うかどうかです
		チェックした場合、Escapeキーは確認選択のウインドウを閉じたりマッピングの
		入力待ち状態を解除したりといった動作が割り当てられます
		また上の項目でSetActive to Openにチェックをしている場合にはEscapeキーで
		マッピングウインドウの開閉も行うことができます
		Use Esc Decided Behaviorのチェックをしない場合はこれらの挙動は行われませんが
		どちらの場合においてもEscapeキーは特殊なキーとして恒久的にユーザーがマッピング
		できないようになっています

	- jInput Open/Close Settings はマッピングウインドウの開閉動作の方法です
		ここの設定はあなたのゲームがどのような方法でマッピングウインドウを開閉するかで
		変わりますので、詳しくは最後にある説明サイトを見てください

	- Axes Advance Settings ではAxisのDeadZone,Gravity,Sensitivityを設定します
		これらは全てのAxis入力に一括で適用されます
		通常のUnityのInspectorと違いここでの値はシーンPlay中に変更した値が
		Play終了後もそのまま保持されるので、あなたのキャラクターの動作が出来上がったら
		実際に動かしつつ最適な設定をするとよいでしょう

 * スタンドアロン版およびエディタでのセーブデータは暗号化バイナリファイルで作られます
	Unityゲームが動いているのと同じディレクトリに'SaveData'フォルダが作られ、
	そのフォルダ内に'InputMapping.dat'として保存されます
	レジストリは使用しません
	これによりPCゲームにおいてプレイヤーがキーコンフィグ設定ファイルを別途保持する事も容易です
	その他のプラットフォームではUnity準拠のPlayerPrefsによってセーブされます

 * UnityGUI版のメニューのスクロールは、jInputMappingSet/MainWindowにある
    UGUIMenuVerticalScroll.csのUse VerticanScrollのチェックで使用するか選択することができます


更なる設定やより詳しい説明についてはサイトを見てください!
http://kakatte.webcrow.jp/jinput/index.html

製作者: Myouji



内包されているOrvitronフォントは SIL Open Font License v1.10に準じて使用しています

